# -*- coding: utf-8 -*-
"""
Created on Mon Mar 29 18:51:24 2021

@author: guddu
"""
import pandas as pd 
pd.options.mode.chained_assignment = None 
import numpy as np 
import re 
import nltk 

from gensim.models import word2vec 
from gensim.models.word2vec import LineSentence

from sklearn.manifold import TSNE 
import matplotlib.pyplot as plt 
%matplotlib inline 
false_data = pd.read_csv('fakedata.csv').sample(5000, replace = True, random_state = 23)
true_data = pd.read_csv('realdata.csv').sample(5000, replace = True, random_state = 23)
STOP_WORDS = nltk.corpus.stopwords.words()

def clean_sentence(val):
    "remove chars that are not letters or numbers, downcase, then remove stop words"
    regex = re.compile('([^\s\w]|_)+')
    sentence = regex.sub('',val).lower()
    sentence = sentence.split(" ")
    
    for word in list(sentence):
        if word in STOP_WORDS: 
            sentence.remove(word)
    
    sentence = " ".join(sentence)
    return sentence 

def clean_dataframe(data):
    "drop nans, then apply 'clean_sentence' function to question1 and 2"
    data = false_data.dropna(how= "any")
    
    for col in ['Article']: 
        data[col] = data[col].apply(clean_sentence)
    return data 

false_data = clean_dataframe(false_data)
true_data = clean_dataframe(true_data)
def build_corpus(data):
    corpus = []
    for col in ['Article']:
        for sentence in data[col].iteritems():
            word_list = sentence[1].split(" ")
            corpus.append(word_list)
    return corpus 

corpus = build_corpus(false_data)
model = word2vec.Word2Vec(corpus, size=100, window=20, min_count=200, workers=4)
true_corpus = build_corpus(true_data)
model.save("word2vecmodel")
model_true = word2vec.Word2Vec(true_corpus, size=90, window=15, min_count=100, workers=4)
model_true.save("word2vecmodel_true")
def tsne_plot(model):
    labels = []
    tokens = []
    
    for word in model.wv.vocab: 
        tokens.append(model[word])
        labels.append(word)
    
    tsne_model = TSNE(perplexity=40, n_components=2, init='pca', n_iter=2500, random_state=23)
    new_values = tsne_model.fit_transform(tokens)
    
    x = []
    y = []
    for value in new_values: 
        x.append(value[0])
        y.append(value[1])
    
    plt.figure(figsize=(16,16))
    for i in range(len(x)):
        plt.scatter(x[i],y[i])
        plt.annotate(labels[i],xy=(x[i],y[i]),xytext=(5,2),textcoords='offset points',ha='right',va='bottom')
        if i >100:
            break 
        plt.show()
tsne_plot(model)        